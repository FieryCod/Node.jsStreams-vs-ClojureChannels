["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$streams-vs-channels.channels-example.tasks","~:imports",null,"~:requires",["^ ","~$async","~$cljs.core.async","^<","^<","~$clojure.core.async","^<","~$settings","~$streams-vs-channels.settings","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$put-and-count",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/channels_example/tasks.cljs","~:line",5,"~:column",8,"~:end-line",5,"~:end-column",21,"~:private",true,"~:arglists",["~#list",["~$quote",["^M",[["~$n","~$ch","~$at"]]]]],"~:doc","Puts the number onto the chan and updates the counter"],"^K",true,"^7","~$streams-vs-channels.channels-example.tasks/put-and-count","~:variadic",false,"^F","src/streams_vs_channels/channels_example/tasks.cljs","^J",21,"~:method-params",["^M",[["~$n","^O","^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^H",1,"^G",5,"^I",5,"~:max-fixed-arity",3,"~:fn-var",true,"^L",["^M",["^N",["^M",[["~$n","^O","^P"]]]]],"^Q","Puts the number onto the chan and updates the counter"],"~$select-chan-1",["^ ","^D",null,"^E",["^ ","^F","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/channels_example/tasks.cljs","^G",13,"^H",7,"^I",13,"^J",20,"^L",["^M",["^N",["^M",[["~$n","~$fizz-chan","~$buzz-chan","~$fizzbuzz-chan","~$others-chan","~$fizz-atom","~$buzz-atom","~$fizzbuzz-atom","~$others-atom"]]]]],"^Q","Groups the numbers by fizz-buzz task and counts the numbers inside the channels\n  (Task #1)"],"^7","~$streams-vs-channels.channels-example.tasks/select-chan-1","^S",false,"^F","src/streams_vs_channels/channels_example/tasks.cljs","^J",20,"^T",["^M",[["~$n","^Z","^[","^10","^11","^12","^13","^14","^15"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",13,"^I",13,"^W",9,"^X",true,"^L",["^M",["^N",["^M",[["~$n","^Z","^[","^10","^11","^12","^13","^14","^15"]]]]],"^Q","Groups the numbers by fizz-buzz task and counts the numbers inside the channels\n  (Task #1)"],"~$group-string-3",["^ ","^D",null,"^E",["^ ","^F","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/channels_example/tasks.cljs","^G",25,"^H",7,"^I",25,"^J",21,"^L",["^M",["^N",["^M",[["~$group-state","~$group"]]]]],"^Q","Takes the group state and creates the string \"Group n: '(GroupContent)\"\n  Updates the group-state and returns string\n  (Task #3)"],"^7","~$streams-vs-channels.channels-example.tasks/group-string-3","^S",false,"^F","src/streams_vs_channels/channels_example/tasks.cljs","^J",21,"^T",["^M",[["^18","^19"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",25,"^I",25,"^W",2,"^X",true,"^L",["^M",["^N",["^M",[["^18","^19"]]]]],"^Q","Takes the group state and creates the string \"Group n: '(GroupContent)\"\n  Updates the group-state and returns string\n  (Task #3)"],"~$process-channel-3",["^ ","^D",null,"^E",["^ ","^F","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/channels_example/tasks.cljs","^G",34,"^H",7,"^I",34,"^J",24,"^L",["^M",["^N",["^M",[["~$achan","~$stream","~$transform-fn"]]]]],"^Q","Processes channel of values and puts the transformed values to stream"],"^7","~$streams-vs-channels.channels-example.tasks/process-channel-3","^S",false,"^F","src/streams_vs_channels/channels_example/tasks.cljs","^J",24,"^T",["^M",[["^1<","^1=","^1>"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",34,"^I",34,"^W",3,"^X",true,"^L",["^M",["^N",["^M",[["^1<","^1=","^1>"]]]]],"^Q","Processes channel of values and puts the transformed values to stream"],"~$write-counter-state-4",["^ ","^D",null,"^E",["^ ","^F","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/channels_example/tasks.cljs","^G",42,"^H",7,"^I",42,"^J",28,"^L",["^M",["^N",["^M",[["^1=","~$name","~$counter"]]]]],"^Q","Writes the end string to the output stream"],"^7","~$streams-vs-channels.channels-example.tasks/write-counter-state-4","^S",false,"^F","src/streams_vs_channels/channels_example/tasks.cljs","^J",28,"^T",["^M",[["^1=","^1A","^1B"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",42,"^I",42,"^W",3,"^X",true,"^L",["^M",["^N",["^M",[["^1=","^1A","^1B"]]]]],"^Q","Writes the end string to the output stream"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^;","^<","^<","^<","^=","^<"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:else","~:recur"]],"~:order",["^1I","^1H"]],"^Q",null]