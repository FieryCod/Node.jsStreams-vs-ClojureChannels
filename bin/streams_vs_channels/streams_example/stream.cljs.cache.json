["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Promise",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$streams-vs-channels.streams-example.stream","~:imports",null,"~:requires",["^ ","~$impl","~$streams-vs-channels.streams-example.impl","~$streams-vs-channels.tools","^=","~$streams-vs-channels.reader","^>","~$streams-vs-channels.settings","^?","~$tools","^=","~$settings","^?","~$impl-transform","~$streams-vs-channels.streams-example.impl-with-transform","^<","^<","^C","^C","~$reader","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$process-with-streams",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/streams_example/stream.cljs","~:line",8,"~:column",7,"~:end-line",8,"~:end-column",27,"~:arglists",["~#list",["~$quote",["^Q",[[]]]]]],"^7","~$streams-vs-channels.streams-example.stream/process-with-streams","~:variadic",false,"^K","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/streams_example/stream.cljs","^O",27,"~:method-params",["^Q",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^M",1,"^L",8,"^N",8,"~:max-fixed-arity",0,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[[]]]]]],"~$process-with-transform-streams",["^ ","^I",null,"^J",["^ ","^K","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/streams_example/stream.cljs","^L",23,"^M",7,"^N",23,"^O",37,"^P",["^Q",["^R",["^Q",[[]]]]]],"^7","~$streams-vs-channels.streams-example.stream/process-with-transform-streams","^T",false,"^K","/Users/karol/workspace/clojure/streams_vs_channels/src/streams_vs_channels/streams_example/stream.cljs","^O",37,"^U",["^Q",[[]]],"^V",null,"^W",["^Q",[null,null]],"^M",1,"^L",23,"^N",23,"^X",0,"^Y",true,"^P",["^Q",["^R",["^Q",[[]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:doc",null]